---
title: "Remaking 2048"
layout: post
date: 2019-02-22 22:48
image: /assets/images/markdown.jpg
headerImage: false
tag:
- class project
- project 1
category: blog
author: Erik Fok
description: Remake of popular game app, 2048


---

{: style="text-align:center"}
![Markdowm Image][7]


## Introduction

The first class project for CMSC436 was to recreate the popular mobile game 2048, a game compared to the popular mobile game Flappy Bird for its virality. The game is played on a 4x4 grid with every turn resulting in a new 2 or 4 tile to be created on random blank tile. The game is played by collasping rows or columns of tiles together in a direction, combining like values. The goal is to reach the 2048 tile before the board fills up and can no longer be collasped.

#### Especial Elements
- [Specification](#specification)
- [Side-by-Side](#side-by-side)
- [Star](#star)
- [Especial Breaker](#especial-breaker)
- [Spoiler](#spoiler)

---

## Specification

### View Details
1. A vertical stack-view consiting of 4 horizontal stack-views
2. 4 Arrow Buttons
3. A New Game Button
4. A Repeatable Switch

### Model Details
1. Create a class game2048 in the model class
2. Represent the board as a one dimensional Int array

#### Model Methods
* left(), right(), up(), down(), which collaspe the board
* getState() -> [Int]: returns current state of the array
* spawn(): creates a new minimum value ('1', displayed as 2^1) in a random blank square. 

<br>

{: style="text-align:center"}
![Markdowm Image][8]

*Both the "Repeatable Switch" and "spawn()" were added/modified from the original 2048 game*


---

# Building 2048

<div style="margin-top: 20px;">
</div>

{: style="text-align:center"}
![Markdowm Image][10]

## Storyboard

<div>
    <p> Storyboards are tools which developers can use to visually map out their user interface design. Developers can drag a drop objects from the object library and place them on screen and in a heirarchy, organizing their construction. In this example, we use our storyboard to layout the foundation of what our app will look like visually and to initialize our relationships between objects. Shown below is our grid, which is composed of an equally spaced vertical stack-view, containing four equally spaced horizontal stack-views, each filled with four views. </p>
</div>

{: style="text-align:center"}
![Markdowm Image][11]

<br>

### Constraints

<div>
    <p> Constraints are essential to any well designed UI. With the multiplicities of screen sizes ranging from iPads to iPhones, positioning objects on screen is not as simple as drag and drop. In other words, a well designed UI on an iPhone X has no guarantee of being well designed on a iPhone 6. What may be perfectly positioned object on an iPhone X could be cutoff on an iPhone 6. </p>
</div>

<div class="side-by-side" style="margin-bottom: 0px; margin-top: 0px; padding-bottom: 0px">
    <div class="toleft" style="text-align:right; margin-top: 8px; margin-bottom: 0px;">
        <img class="image" src="https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/gridViewConstraints.png" alt="Alt Text">
    </div>

    <div class="toright" style="margin-bottom: 0px; padding-bottom: 0px">
        <p> In order for Swift to be able to confidently position an object on screen, across all devices, it must know its height, width, and position. Swift where to place an object based on relationships, named constraints, originating from known anchor points and properties of each individual device. The anchor points include the leading, top, bottom, and trailing anchors, which are the edges of the screen. The properties include the height, width, vertical center, and horizontal center of the device. Although constraints originate from properties of the screen, subsequential constraints can be define based on other constraint-defined objects. </p>
    </div>
</div>

<div style="margin-bottom: 0px; margin-top: 0px; padding-bottom: 0px">
    <p> The example above shows our grid constraints. Using these constraints, we are able to tell Swift where to position our grid at what height and what width. We tell swift to attach our grid's leading, top, and right anchors to the leading, top, and right anchors of our device's screen. Using this information, Swift is able to determine our grid's width. Knowing the width of our grid, we can determine our grid's height by setting an Aspect Ratio constraint with a ratio of 1:1, telling Swift we want our height to be equal our width. Knowing where to anchor our grid, and what it's dimensions are, Swift is able to determine where to place our grid on our device. </p>
</div>

---
<br>

{: style="text-align:center"}
![Markdowm Image][12]


## Views

<div>
    <p> Views are visual building blocks of an app's user interface. They draw and organize the content of a user's screen, making them essential for any and every developer. They can also animate and respond to touch events, some of which will be described later in this article. </p>
</div>
<br>

### Grid View

<div class="side-by-side" style="margin-top: 0px; margin-bottom: 0px;">
    <div class="toleft" style="text-align:center">
        <img class="image" src="https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/white2048button4.png" alt="Alt Text">
    </div>

    <div class="toright" style="padding-top: 12px;">
        <p> To fill out the grid, we create a custom type, GridView, which derives from UIView, a type which manages the content of a rectangular area on screen and has properties such as background color. GridButton is a UIView with a Label centered and a function which updates its display when the board is collasped.</p>
    </div>
</div>

<div style="max-height: 325px !important; overflow-y: auto !important;">
{% highlight swift %}
class GridView : UIView {
    
    var label : UILabel!
    
    override init(frame: CGRect) {
        super.init(frame: frame)
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        self.layer.borderWidth = 4
        self.layer.cornerRadius = BUTTON_ROUNDNESS
        self.layer.borderColor = MyColors.grayBorder.cgColor
        addShadow(view: self)
        
        label = UILabel()
        label.textAlignment = .center
        label.font = UIFont.systemFont(ofSize: 28, weight: .bold)
        label.translatesAutoresizingMaskIntoConstraints = false
        
        addSubview(label)
        label.widthAnchor.constraint(equalTo: widthAnchor).isActive = true
        label.heightAnchor.constraint(equalTo: heightAnchor).isActive = true
        label.centerXAnchor.constraint(equalTo: centerXAnchor).isActive = true
        label.centerYAnchor.constraint(equalTo: centerYAnchor).isActive = true
    }
    
    func updateTile(val: Int) {
        if(val == 0) {
            label.text = ""
        } else {
            label.text = String(2 << (val - 1))
        }
        
        self.backgroundColor = MyColors.numToBackground[val]
        if (val <= 2) {
            label.textColor = MyColors.grayText
        } else {
            label.textColor = .white
        }
    }
}
{% endhighlight %}
</div>
<br>

### Arrow Button

<div class="side-by-side" style="margin-top: 0px; margin-bottom: 0px;">
    <div class="toleft" style="margin-top: 8px; text-align:center">
        <img class="image" src="https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/white2048arrow.png" alt="Alt Text">
    </div>

    <div class="toright" style="padding-top: 5px;">
        <p> To control the board, we create a custom type, ArrowButton, which derives from UIButton, a type which registers touch events. ArrowButtons contain a centered UIImageView composed of an imported arrow image. Each ArrowButton is uniquely identified in the ViewController class, which is used to determine the direction in which the button collaspes the board</p>
    </div>
</div>

<div style="max-height: 325px !important; overflow-y: auto !important;">
{% highlight swift %}
class ArrowButton : UIButton {
    
    var arrowImage : UIImageView!
    
    override init(frame: CGRect) {
        super.init(frame: frame)
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        self.layer.cornerRadius = BUTTON_ROUNDNESS
        self.backgroundColor = MyColors.grayBorder
        addShadow(view: self)
        
        arrowImage = UIImageView()
        arrowImage.image = UIImage(named: "keyboard-right-arrow-button")
        arrowImage.alpha = 0.5
        arrowImage.translatesAutoresizingMaskIntoConstraints = false
        
        addSubview(arrowImage)
        arrowImage.widthAnchor.constraint(equalTo: widthAnchor, multiplier: 0.6).isActive = true
        arrowImage.heightAnchor.constraint(equalTo: heightAnchor, multiplier: 0.6).isActive = true
        arrowImage.centerXAnchor.constraint(equalTo: centerXAnchor).isActive = true
        arrowImage.centerYAnchor.constraint(equalTo: centerYAnchor).isActive = true
    }
}
{% endhighlight %}
</div>
<br>

#### Rotating ArrowButtons

<div class="side-by-side" style="margin-top: 0px; margin-bottom: 0px;">
    <div class="toleft" style="margin-top: 23px; text-align:right;">
        <img class="image" src="https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/IBInspectableRotation.png" alt="Alt Text">
    </div>

    <div class="toright" style="max-height: 180px !important; overflow-y: auto !important;">
{% highlight swift %}
extension UIView {
    
    @IBInspectable
    var rotation: CGFloat {
        get {
            return CGFloat(-1)
        }
        set {
            switch (newValue) {
            case 90:
                self.transform = self.transform.rotated(by: CGFloat(Double.pi / 2))
                break
            case 180:
                self.transform = self.transform.rotated(by: CGFloat(Double.pi))
                break
            case 270:
                self.transform = self.transform.rotated(by: CGFloat(Double.pi * 3/2))
                break
            default:
                break
            }
        }
    }
}
{% endhighlight %}
    </div>
</div>

<div style="margin-top: 10px;">
    <p> To orient the arrows left, up, down, right, we create an extension of UIView and define a rotation method with the tag @IBInspectable. Swift's extensions are very powerful in that they allow you to add functionality to existing classes, structs, enums, and protocols. In this example, we extend a class defined in Swift's user interface library, UIView. This means the rotation method can now be applied to any UIView or any of its subtypes, such as UIButton. The @IBInspectable tag pulls this method into XCode's Interface Builder, allowing us to apply rotation values to UIViews from the Interface Builder.</p>
</div>
<br>

### Controllers

<div>
    <p> Controllers handle the flow of data between two entities. In Swift, the most common controller is a view controller. The view controller connects the logic side of the application, the model, to the user interaction side of the application, the view. It is the binder of these two entities, in a common architectural pattern known as MVC, Model-View-Controller. </p>
</div>




### Model




<div class="side-by-side">
    <div class="toleft">
        <img class="image" src="{{ site.url }}/{{ site.picture }}" alt="Alt Text">
        <figcaption class="caption">Photo by John Doe</figcaption>
    </div>

    <div class="toright">
        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
    </div>
</div>

**Text** on the left and **Image** on the right:

{% highlight html %}
<div class="side-by-side">
    <div class="toleft">
        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
    </div>

    <div class="toright">
        <img class="image" src="{{ site.url }}/{{ site.picture }}" alt="Alt Text">
        <figcaption class="caption">Photo by John Doe</figcaption>
    </div>
</div>
{% endhighlight %}

<div class="side-by-side">
    <div class="toleft">
        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
    </div>

    <div class="toright">
        <img class="image" src="{{ site.url }}/{{ site.picture }}" alt="Alt Text">
        <figcaption class="caption">Photo by John Doe</figcaption>
    </div>
</div>

---

## Star

You can give evidence to a post. Just add the tag to the markdown file.

{% highlight raw %}
star: true
{% endhighlight %}

---

## Especial Breaker

You can add a especial *hr* to your text.

{% highlight html %}
<div class="breaker"></div>
{% endhighlight %}

<div class="breaker"></div>

---

## Spoiler

You can add an especial hidden content that appears on hover.

{% highlight html %}
<div class="spoiler"><p>your content</p></div>
{% endhighlight %}

<div class="spoiler"><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p></div>

---

## Gist

You can add Gists from github.

{% highlight raw %}
{ % gist sergiokopplin/91ff4220480727b47224245ee2e9c291 % }
{% endhighlight %}

{% gist sergiokopplin/91ff4220480727b47224245ee2e9c291 %}

---

## Codepen

You can add Pens from Codepen.

{% highlight html %}
<p data-height="268" data-theme-id="0" data-slug-hash="gfdDu" data-default-tab="result" data-user="chriscoyier" class='codepen'>
    See the Pen <a href='http://codepen.io/chriscoyier/pen/gfdDu/'>Crappy Recreation of the Book Cover of *The Flame Alphabet*</a> by Chris Coyier (<a href='http://codepen.io/chriscoyier'>@chriscoyier</a>) on <a href='http://codepen.io'>CodePen</a>.
</p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>
{% endhighlight %}

<p data-height="268" data-theme-id="0" data-slug-hash="gfdDu" data-default-tab="result" data-user="chriscoyier" class='codepen'>See the Pen <a href='http://codepen.io/chriscoyier/pen/gfdDu/'>Crappy Recreation of the Book Cover of *The Flame Alphabet*</a> by Chris Coyier (<a href='http://codepen.io/chriscoyier'>@chriscoyier</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

---

## Slideshare

Add your presentations here!

{% highlight html %}
<iframe src="//www.slideshare.net/slideshow/embed_code/key/hqDhSJoWkrHe7l" width="560" height="310" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>
{% endhighlight %}

<iframe src="//www.slideshare.net/slideshow/embed_code/key/hqDhSJoWkrHe7l" width="560" height="310" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>

---

## Videos

Do you want some videos? Youtube, Vimeo or Vevo? Copy the embed code and paste on your post!

**Example**

{% highlight html %}
<iframe width="560" height="310" src="https://www.youtube.com/embed/r7XhWUDj-Ts" frameborder="0" allowfullscreen></iframe>
{% endhighlight %}

<iframe width="560" height="310" src="https://www.youtube.com/embed/r7XhWUDj-Ts" frameborder="0" allowfullscreen></iframe>


[1]: http://daringfireball.net/projects/markdown/
[2]: http://www.fileformat.info/info/unicode/char/2163/index.htm
[3]: http://www.markitdown.net/
[4]: http://daringfireball.net/projects/markdown/basics
[5]: http://daringfireball.net/projects/markdown/syntax
[6]: http://kune.fr/wp-content/uploads/2013/10/ghost-blog.jpg

[7]: https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/official2048square.png
[8]: https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/spec2048.jpg
[9]: https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/my2048.png
[10]: https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/my2048sim.png
[11]: https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/gridViewStoryBoard.png
[12]: https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/threeBlocks.png


