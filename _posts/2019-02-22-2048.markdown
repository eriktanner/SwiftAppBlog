---
title: "Remaking 2048"
layout: post
date: 2019-02-22 22:48
image: /assets/images/markdown.jpg
headerImage: false
tag:
- class project
- project 1
category: blog
author: Erik Fok
description: Remake of popular game app, 2048


---

{: style="text-align:center"}
![Markdowm Image][7]


## Introduction

The first class project for CMSC436 was to recreate the popular mobile game 2048, a game compared to the popular mobile game Flappy Bird for its virality. The game is played on a 4x4 grid with every turn resulting in a new 2 or 4 tile to be created on random blank tile. The game is played by collasping rows or columns of tiles together in a direction, combining like values. The goal is to reach the 2048 tile before the board fills up and can no longer be collasped.

#### Especial Elements
- [Specification](#specification)
- [Side-by-Side](#side-by-side)
- [Star](#star)
- [Especial Breaker](#especial-breaker)
- [Spoiler](#spoiler)

---

## Specification

### View Details
1. A vertical stack-view consiting of 4 horizontal stack-views
2. 4 Arrow Buttons
3. A New Game Button
4. A Repeatable Switch

### Model Details
1. Create a class game2048 in the model class
2. Represent the board as a one dimensional Int array

#### Model Methods
* left(), right(), up(), down(), which collaspe the board
* getState() -> [Int]: returns current state of the array
* spawn(): creates a new minimum value ('1', displayed as 2^1) in a random blank square. 

<br>

{: style="text-align:center"}
![Markdowm Image][8]

*Both the "Repeatable Switch" and "spawn()" were added/modified from the original 2048 game*


---

# Building 2048

<div style="margin-top: 20px;">
</div>

{: style="text-align:center"}
![Markdowm Image][10]

## Storyboard

<div>
    <p> Storyboards are tools which developers can use to visually map out their user interface design. Developers can drag a drop objects from the object library and place them on screen and in a heirarchy, organizing their construction. In this example, we use our storyboard to layout the foundation of what our app will look like visually and to initialize our relationships between objects. Shown below is our grid, which is composed of an equally spaced vertical stack-view, containing four equally spaced horizontal stack-views, each filled with four views. </p>
</div>

{: style="text-align:center"}
![Markdowm Image][11]

<br>

### Constraints

<div>
    <p> Constraints are essential to any well designed UI. With the multiplicities of screen sizes ranging from iPads to iPhones, positioning objects on screen is not as simple as drag and drop. In other words, a well designed UI on an iPhone X has no guarantee of being well designed on a iPhone 6. What may be perfectly positioned on an iPhone X could be cutoff on an iPhone 6. </p>
</div>

<div class="side-by-side" style="margin-bottom: 0px; margin-top: 0px; padding-bottom: 0px">
    <div class="toleft" style="text-align:right; margin-top: 8px; margin-bottom: 0px;">
        <img class="image" src="https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/gridViewConstraints.png" alt="Alt Text">
    </div>

    <div class="toright" style="margin-bottom: 0px; padding-bottom: 0px">
        <p> In order for Swift to be able to confidently position an object on screen, across all devices, it must know its height, width, and position. Swift knows where to place an object based on relationships, named constraints, originating from known anchor points and properties of each individual device. The anchor points include the leading, top, bottom, and trailing anchors, which are the edges of the screen. The properties include the height, width, vertical center, and horizontal center of the device. Although constraints originate from properties of the screen, subsequential constraints can be define based on the properties of other objects. </p>
    </div>
</div>

<div style="margin-bottom: 0px; margin-top: 0px; padding-bottom: 0px">
    <p> The example above shows our grid constraints. Using these constraints, we are able to tell Swift where to position our grid at what height and what width. We tell swift to attach our grid's leading, top, and right anchors to the leading, top, and right anchors of our device's screen and to add 20 pixels of padding. Using this information, Swift is able to determine our grid's width. Knowing the width of our grid, we can determine our grid's height by setting an Aspect Ratio constraint with a ratio of 1:1, telling Swift we want our height to be equal our width. Knowing where to anchor our grid, and what it's dimensions are, Swift is able to determine where to place our grid on our device and at what size. </p>
</div>

---
<br>

{: style="text-align:center"}
![Markdowm Image][12]


## Views

<div>
    <p> Views are visual building blocks of an app's user interface. They draw and organize the content of a user's screen, making them essential for any and every developer. They can also animate and respond to touch events, some of which will be described later in this article. </p>
</div>
<br>

### Grid View

<div class="side-by-side" style="margin-top: 5px; margin-bottom: 0px;">
    <div class="toleft" style="text-align:center">
        <img class="image" src="https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/white2048button4.png" alt="Alt Text">
    </div>

    <div class="toright" style="padding-top: 12px;">
        <p> To fill out the grid, we create a custom type, GridView, which derives from UIView, a type which manages the content of a rectangular area on screen and has properties such as background color. GridButton is a UIView with a Label centered and a function which updates its display when the board is collasped.</p>
    </div>
</div>

<div style="max-height: 325px !important; overflow-y: auto !important;">
{% highlight swift %}
class GridView : UIView {
    
    var label : UILabel!
    
    override init(frame: CGRect) {
        super.init(frame: frame)
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        self.layer.borderWidth = 4
        self.layer.cornerRadius = BUTTON_ROUNDNESS
        self.layer.borderColor = MyColors.grayBorder.cgColor
        addShadow(view: self)
        
        label = UILabel()
        label.textAlignment = .center
        label.font = UIFont.systemFont(ofSize: 28, weight: .bold)
        label.translatesAutoresizingMaskIntoConstraints = false
        
        addSubview(label)
        label.widthAnchor.constraint(equalTo: widthAnchor).isActive = true
        label.heightAnchor.constraint(equalTo: heightAnchor).isActive = true
        label.centerXAnchor.constraint(equalTo: centerXAnchor).isActive = true
        label.centerYAnchor.constraint(equalTo: centerYAnchor).isActive = true
    }
    
    func updateTile(val: Int) {
        if(val == 0) {
            label.text = ""
        } else {
            label.text = String(2 << (val - 1))
        }
        
        self.backgroundColor = MyColors.numToBackground[val]
        if (val <= 2) {
            label.textColor = MyColors.grayText
        } else {
            label.textColor = .white
        }
    }
}
{% endhighlight %}
</div>
<br>

### Arrow Button

<div class="side-by-side" style="margin-top: 0px; margin-bottom: 0px;">
    <div class="toleft" style="margin-top: 15px; text-align:center">
        <img class="image" src="https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/white2048arrow.png" alt="Alt Text">
    </div>

    <div class="toright" style="padding-top: 5px;">
        <p> To control the board, we create a custom type, ArrowButton, which derives from UIButton, a type which registers touch events. ArrowButtons contain a centered UIImageView composed of an imported arrow image. Each ArrowButton is uniquely identified in the ViewController class, which is used to determine the direction in which the button collaspes the board</p>
    </div>
</div>

<div style="max-height: 325px !important; overflow-y: auto !important;">
{% highlight swift %}
class ArrowButton : UIButton {
    
    var arrowImage : UIImageView!
    
    override init(frame: CGRect) {
        super.init(frame: frame)
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        self.layer.cornerRadius = BUTTON_ROUNDNESS
        self.backgroundColor = MyColors.grayBorder
        addShadow(view: self)
        
        arrowImage = UIImageView()
        arrowImage.image = UIImage(named: "keyboard-right-arrow-button")
        arrowImage.alpha = 0.5
        arrowImage.translatesAutoresizingMaskIntoConstraints = false
        
        addSubview(arrowImage)
        arrowImage.widthAnchor.constraint(equalTo: widthAnchor, multiplier: 0.6).isActive = true
        arrowImage.heightAnchor.constraint(equalTo: heightAnchor, multiplier: 0.6).isActive = true
        arrowImage.centerXAnchor.constraint(equalTo: centerXAnchor).isActive = true
        arrowImage.centerYAnchor.constraint(equalTo: centerYAnchor).isActive = true
    }
}
{% endhighlight %}
</div>

#### Rotating Arrow Buttons

<div class="side-by-side" style="margin-top: 10px; margin-bottom: 0px;">
    <div class="toleft" style="margin-top: 23px; text-align:right;">
        <img class="image" src="https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/IBInspectableRotation.png" alt="Alt Text">
    </div>

    <div class="toright" style="max-height: 180px !important; overflow-y: auto !important;">
{% highlight swift %}
extension UIView {
    
    @IBInspectable
    var rotation: CGFloat {
        get {
            return CGFloat(-1)
        }
        set {
            switch (newValue) {
            case 90:
                self.transform = self.transform.rotated(by: CGFloat(Double.pi / 2))
                break
            case 180:
                self.transform = self.transform.rotated(by: CGFloat(Double.pi))
                break
            case 270:
                self.transform = self.transform.rotated(by: CGFloat(Double.pi * 3/2))
                break
            default:
                break
            }
        }
    }
}
{% endhighlight %}
    </div>
</div>

<div style="margin-top: 10px;">
    <p> To orient the arrows left, up, down, right, we create an extension of UIView and define a rotation method with the tag @IBInspectable. Swift's extensions are very powerful in that they allow us to add functionality to already defined classes, structs, enums, and protocols. In this example, we extend a class defined in Swift's user interface library, UIView. This means the rotation method can now be applied to any UIView or any of its subclasses, such as UIButton. The @IBInspectable tag pulls this method into XCode's Interface Builder, allowing us to apply rotation values to UIViews from the Interface Builder.</p>
</div>

---
<br>

{: style="text-align:center"}
![Markdowm Image][14]

## Controllers

Controllers handle the flow of data between entities. A controller transforms the input of one entity into the input that another entity can understand, much like your interaction with your remote, keyboard, or, you guessed it, your controller. In Swift, the most common controller is a view controller. The view controller connects the user interaction side of the application, the view, to the logic side of the application, the model. We use it to translate communication between these two entities, in a common architectural pattern known as MVC, [Model-View-Controller][13].


### View Controller

Every storyboard is connected to a UIViewController. Using option click and drag, we are able to create @IBOutlets, connecting views from each storyboard to their view controller. Here we set up references for views which we may choose to edit programatically, or for views which have impact on the logic of our game. In this example, we create our model object, game, whose logic is affected when the board is collasped. We collaspe the board once an arrow button registers a touchUpInside event, seen in the @IBAction, arrowClicked, which is connected to the four arrow buttons via the storyboard. 

<div style="max-height: 325px !important; overflow-y: auto !important;">
{% highlight swift %}
class ViewController: UIViewController {

    @IBOutlet private weak var mainView: UIView!
    @IBOutlet private weak var grid: UIStackView!
    
    @IBOutlet private var arrowButtons: [ArrowButton]!
    @IBOutlet private weak var bNewGame: UIButton!
    
    private var gridViews = [GridView]()
    private var game : game2048!
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        mainView.backgroundColor = MyColors.background
        for case let horizontalStackView as UIStackView in grid.arrangedSubviews {
            for case let gridView as GridView in horizontalStackView.arrangedSubviews {
                gridViews.append(gridView)
            }
        }
        newGame()
    }
    
    @IBAction private func newGameClicked() {
        newGame()
    }
    
    private func newGame() {
        game = game2048(delegate: self)
    }
    
    @IBAction private func arrowClicked(_ sender: ArrowButton) {
        let arrowIndex = arrowButtons.firstIndex(of: sender)
        game.collaspeInDirection(arrowIndex: arrowIndex)
    }
}
{% endhighlight %}
</div>

---
<br>

{: style="text-align:center"}
![Markdowm Image][15]

## Model

The model handles the logical backend of the application. This side of the application knows nothing about the view or how the user interacts with the application, the only thing it knows is how to handle data. 


### game2048

What goes in the model of our game? The question can more clearly be "what does our game need to know behind the scenes?" Our game needs to know what values are behind each tile, how to spawn a 2 tile or a 4 tile in a random location, and how to collapse the board. In our game, we will represent the values behind each tile as the power of 2 of each tile, meaning a tile displayed as 8 has a backend value of 3 (2^3 = 8), and store these values in an array of length 16. We use Int.random to spawn either a 2 or a 4 tile in a random location, and we create functions which collapse the board left, right, up, or down.

<div style="max-height: 425px !important; overflow-y: auto !important;">
{% highlight swift %}
class game2048 {
    
    private(set) var nodes : [Int]! //(Math) Power of every Tile 
    weak var delegate: game2048Delegate?
    
    init(delegate: game2048Delegate?) {
        self.delegate = delegate
        nodes = [Int](repeating: 0, count: 16)
        startGame()
    }
    
    private func startGame() {
        delegate?.initGrid()
        spawn()
        spawn()
    }
    
    private func spawn() {
        var rand = Int.random(in: 0..<16)
            
        while(nodes[rand] != 0) {
            rand = Int.random(in: 0..<16)
        }
            
        nodes[rand] = Int.random(in: 0..<2)
        delegate?.updateGrid(grid: nodes)
    }

    func collaspeInDirection(arrowIndex: Int?) {
        if let dir = arrowIndex {
            assert(dir >= 0 && dir < 4, "Invalid Collaspe Board Direction")
            if dir == 0 { left() }
            else if dir == 1 { up() }
            else if dir == 2 { down() }
            else if dir == 3 { right() }
        } else {
            print("collaspeOnButtonClick - Error: arrowIndex is nil")
        }
    }
    
    private func left() {
        if let collasped = Collapse.collaspeGrid(grid: nodes, rowLength: 4) {
            nodes = collasped
            delegate?.updateGrid(grid: nodes)
            spawn()
        }
    }
    
    private func right() {
        nodes.reverse1d2(size: 4)
        let collasped = Collapse.collaspeGrid(grid: nodes, rowLength: 4)
        if (collasped != nil) {
            nodes = collasped
        }
        nodes.reverse1d2(size: 4)
        delegate?.updateGrid(grid: nodes)
        if (collasped != nil) {
            spawn()
        }
    }
    
    private func up() {
        nodes.transpose1d2(size: 4)
        let collasped = Collapse.collaspeGrid(grid: nodes, rowLength: 4)
        if (collasped != nil) {
            nodes = collasped
        }
        nodes.transpose1d2(size: 4)
        delegate?.updateGrid(grid: nodes)
        if (collasped != nil) {
            spawn()
        }
    }
    
    private func down() {
        nodes.transpose1d2(size: 4)
        nodes.reverse1d2(size: 4)
        let collasped = Collapse.collaspeGrid(grid: nodes, rowLength: 4)
        if (collasped != nil) {
            nodes = collasped
        }
        nodes.reverse1d2(size: 4)
        nodes.transpose1d2(size: 4)
        delegate?.updateGrid(grid: nodes)
        if (collasped != nil) {
            spawn()
        }
    }
}
{% endhighlight %}
</div>


#### What's this other stuff?


And where's the number crunching? You may have noticed that our left, right, up, and down functions are calling functions not visible in our game2048 class. Our number crunching functionality was broken off from our game2048 and put into a class, Collapse, and in an extension of the Array class. This helps to keep our classes small, improving the readability, management, and usability of our code.
Within Collapse, we are able to take 1-demensional arrays and collapse them, meaning like values within the array are combined if adjacent indices are of equal value. The reverse1d and transpose1d2 extensions allow us to shift around the boards values so that they may be used within the same collapse method to produce their desired result.

<div style="max-height: 400px !important; overflow-y: auto !important;">
{% highlight swift %}
class Collapse {
    
    /* Removes zeros, does one time combining of consecutive equal values
     (pairs) so that the pair now equal a single value of the shared 
     value + 1, adds zeros to the end of the new arr so that its size 
     equals the original size */
    static func collapse(arr: [Int]) -> [Int] {
        
        var collasped = arr.filter{$0 != 0}
        
        for i in 0..<collasped.count {
            
            if (i < collasped.count - 1) {
                if collasped[i] == collasped[i+1] {
                    collasped[i] = collasped[i] + 1
                    collasped[i+1] = 0
                    collasped = collasped.filter{$0 != 0}
                }
            }
        }
        let diff = arr.count - collasped.count
        for _ in 0..<diff {
            collasped.append(0)
        }
        
        return collasped
    }
    
    static func collaspeGrid(grid: [Int], rowLength: Int) -> [Int]? {
        assert(rowLength * rowLength == grid.count)
        var indexStart = 0
        var postCollaspe = [Int]()
        
        for _ in 0..<rowLength {
            postCollaspe += collapse(arr: Array(grid[indexStart..<indexStart + rowLength]))
            indexStart += rowLength
        }

        return grid == postCollaspe ? nil : postCollaspe
    }
}

extension Array {
    
    /*Reverses each subset of the array of length size(parameter) in place*/
    mutating func reverse1d2(size: Int) {
        assert(size * size == self.count)
        var start = 0
        var end = size
        
        for _ in 0..<size {
            let reversedRange = self[start..<end].reversed()
            self.replaceSubrange(start..<end, with: reversedRange)
            start = end
            end = end + size
        }
    }
    
    /*Does a matrix transpose on a 1d array as if it were a 2d array
     with rows and columns of length size*/
    mutating func transpose1d2(size: Int) {
        assert(size * size == self.count)
        var transposedArr = [Element]()
        
        for firstElementOfNewRow in 0..<size {
            var newRow = [Element]()
            
            for multiplier in 0..<size {
                newRow.append(self[firstElementOfNewRow + size * multiplier])
            }
            
            transposedArr += newRow
        }
        
        self = transposedArr
    }
}

{% endhighlight %}
</div>

---
<br>

{: style="text-align:center"}
![Markdowm Image][16]

### Communication is Key

Thoughout our game2048 class, you may have noticed calls to something called a delegate. When we talked about the view controller, we explained how it acts as the gateway between the communication of our two entities, our view and our model. When we created our view controller, we could see that our view controller holds references to both our view and our model, and so our view controller is unlimited in its communication to them. Our model, however, has no idea where it came from, it has no idea who created it. To establish the connection from our model to our view controller, we use a design pattern called **delegation**. 

### Delegation

Delegates allow us to communicate from one object to another in a decoupled manner. Decoupled code is ideal for keeping our systems more independent, which makes our system as a whole more robust. Here we use delegates to communicate from our game2048 object, game, back to its owner, our view controller. Our game object does not know anything about our view controller, only that it adheres to a protocol, allowing us to set it as our game object's delegate. As our code runs in our game2048 class, it makes calls to its delegate, if the delegate is set, it runs the code defined by the delegate object. In our example, our game object code runs, makes calls to the delegate, finds that its set to our view controller, and runs the code defined by our view controller.

<div style="max-height: 250px !important; overflow-y: auto !important;">
{% highlight swift %}
protocol game2048Delegate: class {
    func initGrid()
    func updateGrid(grid: [Int])
}

extension ViewController: game2048Delegate {

    func updateGrid(grid: [Int]) {
        for i in 0..<16 {
            gridViews[i].updateTile(val: grid[i])
        }
    }
    
    func initGrid() {
        for i in 0..<16 {
            gridViews[i].updateTile(val: 0)
        }
    }
}
{% endhighlight %}
</div>

---

{: style="text-align:center"}
![Markdowm Image][10]

## Conclusion

 To summarize, we learned how the storyboard helps developers lay out the foundation of their apps and constraints allow applications to be multi-deviced. Views govern the look and feel of an application, models act as the logical backend, and controllers act as the middle man between the two. Lastly, we learned how we can use delegates to establish a means of communicating between decoupled classes. And there it is, with this guide we have all the tools needed to create one of the most popular games to ever exist on Apple's App Store, 2048.



[7]: https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/official2048square.png
[8]: https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/spec2048.jpg
[9]: https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/my2048.png
[10]: https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/my2048sim.png
[11]: https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/gridViewStoryBoard.png
[12]: https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/threeBlocks.png
[13]: https://www.raywenderlich.com/1073-model-view-controller-mvc-in-ios-a-modern-approach
[14]: https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/blueController.png
[15]: https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/logicGate.png
[16]: https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/signal.png


