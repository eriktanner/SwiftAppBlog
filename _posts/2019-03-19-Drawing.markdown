---
title: "Drawing"
layout: post
date: 2019-03-19 22:48
image: /assets/images/2048/official2048square.png
headerImage: false
tag:
- class project
- project 1
category: blog
author: Erik Fok
description: Drawing in ios

---

{: style="text-align:center"}
![Markdowm Image][7]

## Drawing

<div>
    <p> In iOS, we can add custom drawings on our views by using Apple's Core Graphic's API. Core Graphic's is a powerful vector drawing framework, and it comes in handy when dealing with the various phone sizes and pixel capabilities of phones. Instead of drawing multiple boards of various sizes in say Photoshop, we're going to draw our board through code using Core Graphic's capabiltiies, guaranteeing a quality board irrespective of the phone it is displayed on.  </p>
</div>

---

## Background

Our goal for 2048 is to have animated tiles when the user collapses the board left, right, up, or down. Before getting ahead of ourselves with dynamic animations, we're going to create a background to our game, a static board. In this article, we are going to draw the board of our 2048 game. 


### Setting up the View


<div>
    <p> First things first, we're going to have to create a view for us to work on. This will involve creating our view in our storyboard, and setting its constraints. In this example, our board is placed in a vertical stack view, an so its leading and trailing anchors will equal the leading and trailing anchors of its containing stack view. The constraints of both our board and its containing stack view are shown. A thing to note is the fact that 2 of the stack view's constraints are faded. These constraints are applied when the height of the phone is compact, for most phones this is when it is landscape mode. Another point is the "@250" and others, these are priority numbers. Priority number tell the compiler which constraints it is allowed to break, no @ symbol means the constraint is required, and lower priority numbers will be broken before higher priority numbers. </p>
</div>

{: style="text-align:center"}
![Markdowm Image][8]

<br>

### Creating the Class

<div class="side-by-side" style="margin-bottom: 0px; margin-top: 0px; padding-bottom: 0px">
    <div class="toleft" style="text-align:right; margin-top: 8px; margin-bottom: 0px;">
        <img class="image" src="https://eriktanner.github.io/SwiftAppBlog/assets/images/drawing/class_selection.png" alt="Alt Text">
    </div>

    <div class="toright" style="margin-bottom: 0px; padding-bottom: 0px">
        <p>  Next, we need to create our class, BoardView. We need to create a file, board.swift, and add a class BoardView, subclassing from UIView. Then we will go back to the view we want to represent as our board, as set its class as BoardView in the Identity Inspector. </p>
    </div>
</div>


## Overidding draw(rect: CGRect)

<div>
    <p> When the compiler renders or rerenders views, it calls a function home to all UIViews, draw(rect: CGRect). CGRect represents a location and a size on screen, in our case, this CGRect will represent the location and size of our board, which is decided by the contraints given to our board in the storyboard. It is here where we add our code to handle our custom drawing for our BoardView. To draw we are going to use a class in the Core Graphic's API, UIBezierPath. UIBezierPath allows us to set locations and draw lines to these locations. It also has useful constructors for creating shapes, such as rectangles. We can then fill, if it's closed, and stroke these paths to draw our board.</p>
</div>

### Our draw(rect: CGRect) function

<div class="side-by-side" style="margin-bottom: 0px; margin-top: 0px; padding-bottom: 0">
    <div class="toleft" style="max-height: 250px !important; overflow-y: auto !important;">
{% highlight swift %}
override func draw(_ rect: CGRect) {
    MyColors.background0.setFill()
    MyColors.grayBorder.setStroke()
        
    let lineWidth = CGFloat((bounds.maxX - bounds.minX)/40)
        
    let borderPath = UIBezierPath(rect: rect)
    borderPath.lineWidth = lineWidth
    borderPath.fill()
    borderPath.stroke()
        
    let path = UIBezierPath()
    path.lineWidth = lineWidth
        
    for i in 1...3 {
        path.move(to: CGPoint(x: bounds.maxX * CGFloat(i) / 4, y: bounds.minY))
        path.addLine(to: CGPoint(x: bounds.maxX * CGFloat(i) / 4, y: bounds.maxY))
        path.move(to: CGPoint(x: bounds.minX, y: bounds.maxY * CGFloat(i) / 4))
        path.addLine(to: CGPoint(x: bounds.maxX, y: bounds.maxY * CGFloat(i) / 4))
    }
        
    path.stroke()
}
{% endhighlight %}
    </div>

    <div class="toright" style="margin-bottom: 0px; padding-bottom: 0px">
        <p> Here we first set our fill and stroke colors. We then create a Bezier path, and rectanlge, and calculate the width we want our strokes to be, based on the width of the board. The width of our lines depending on whch device is running and its orientation. Lastly, we create our grid lines by creating another Bezier path, which has its points set and drawn from respective tertiary points of the board, and stroking its path. </p>
    </div>
</div>

 ---

## Conclusion

<div>
    <p> With that, we have just drawn our board using Core Graphics. This has granted us a more flexible UI, which adjusts to any screen size or orientation seemlessly, and a background for our tiles to move upon. </p>
</div>


#### Rotating Arrow Buttons

<div class="side-by-side" style="margin-top: 10px; margin-bottom: 0px;">
    <div class="toleft" style="margin-top: 23px; text-align:right;">
        <img class="image" src="https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/IBInspectableRotation.png" alt="Alt Text">
    </div>

    <div class="toright" style="max-height: 180px !important; overflow-y: auto !important;">
{% highlight swift %}
extension UIView {
    
    @IBInspectable
    var rotation: CGFloat {
        get {
            return CGFloat(-1)
        }
        set {
            switch (newValue) {
            case 90:
                self.transform = self.transform.rotated(by: CGFloat(Double.pi / 2))
                break
            case 180:
                self.transform = self.transform.rotated(by: CGFloat(Double.pi))
                break
            case 270:
                self.transform = self.transform.rotated(by: CGFloat(Double.pi * 3/2))
                break
            default:
                break
            }
        }
    }
}
{% endhighlight %}
    </div>
</div>

<div style="margin-top: 10px;">
    <p> To orient the arrows left, up, down, right, we create an extension of UIView and define a rotation variable with the tag @IBInspectable. Swift's extensions are very powerful in that they allow us to add functionality to already defined classes, structs, enums, and protocols. In this example, we extend a class defined in Swift's user interface library, UIView. This means the rotation method can now be applied to any UIView or any of its subclasses, such as UIButton. The @IBInspectable tag pulls this method into XCode's Interface Builder, allowing us to apply rotation values to UIViews from the Interface Builder.</p>
</div>

---
<br>

{: style="text-align:center"}
![Markdowm Image][14]

## Controllers

Controllers handle the flow of data between entities. A controller transforms the input of one entity into the input that another entity can understand, much like your interaction with your remote, keyboard, or, you guessed it, your controller. In Swift, the most common controller is a view controller. The view controller connects the user interaction side of the application, the view, to the logic side of the application, the model. We use it to translate communication between these two entities, in a common architectural pattern known as MVC, [Model-View-Controller][13].


### View Controller

Every storyboard is connected to a UIViewController. Using option click and drag, we are able to create @IBOutlets, connecting views from each storyboard to their view controller. Here we set up references for views which we may choose to edit programatically, or for views which have impact on the logic of our game. In this example, we create our model object, game, whose logic is affected when the board is collasped. We collaspe the board once an arrow button registers a touchUpInside event, seen in the @IBAction, arrowClicked, which is connected to the four arrow buttons via the storyboard. 

<div style="max-height: 325px !important; overflow-y: auto !important;">
{% highlight swift %}
class ViewController: UIViewController {

    @IBOutlet private weak var mainView: UIView!
    @IBOutlet private weak var grid: UIStackView!
    
    @IBOutlet private var arrowButtons: [ArrowButton]!
    @IBOutlet private weak var bNewGame: UIButton!
    
    private var gridViews = [GridView]()
    private var game : game2048!
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        mainView.backgroundColor = MyColors.background
        for case let horizontalStackView as UIStackView in grid.arrangedSubviews {
            for case let gridView as GridView in horizontalStackView.arrangedSubviews {
                gridViews.append(gridView)
            }
        }
        newGame()
    }
    
    @IBAction private func newGameClicked() {
        newGame()
    }
    
    private func newGame() {
        game = game2048(delegate: self)
    }
    
    @IBAction private func arrowClicked(_ sender: ArrowButton) {
        let arrowIndex = arrowButtons.firstIndex(of: sender)
        game.collaspeInDirection(arrowIndex: arrowIndex)
    }
}
{% endhighlight %}
</div>

---
<br>

{: style="text-align:center"}
![Markdowm Image][15]

## Model

The model handles the logical backend of the application. This side of the application knows nothing about the view or how the user interacts with the application, the only thing it knows is how to handle data. 


### game2048

What goes in the model of our game? The question can more clearly be asked as "what does our game need to know behind the scenes?" Our game needs to know what values are behind each tile, how to spawn a 2 or 4 tile in a random blank location, and how to collapse the board. In our game, we will represent the values behind each tile as the power of 2 of each tile, meaning a tile displayed as 8 has a backend value of 3 (2^3 = 8), and store these values in an array of length 16. We use Int.random to spawn either a 2 or 4 tile in a random location, and we create functions which collapse the board left, right, up, and down.

<div style="max-height: 425px !important; overflow-y: auto !important;">
{% highlight swift %}
class game2048 {
    
    private(set) var nodes : [Int]! //(Math) Power of every Tile 
    weak var delegate: game2048Delegate?
    
    init(delegate: game2048Delegate?) {
        self.delegate = delegate
        nodes = [Int](repeating: 0, count: 16)
        startGame()
    }
    
    private func startGame() {
        delegate?.initGrid()
        spawn()
        spawn()
    }
    
    private func spawn() {
        var rand = Int.random(in: 0..<16)
            
        while(nodes[rand] != 0) {
            rand = Int.random(in: 0..<16)
        }
            
        nodes[rand] = Int.random(in: 0..<2)
        delegate?.updateGrid(grid: nodes)
    }

    func collaspeInDirection(arrowIndex: Int?) {
        if let dir = arrowIndex {
            assert(dir >= 0 && dir < 4, "Invalid Collaspe Board Direction")
            if dir == 0 { left() }
            else if dir == 1 { up() }
            else if dir == 2 { down() }
            else if dir == 3 { right() }
        } else {
            print("collaspeOnButtonClick - Error: arrowIndex is nil")
        }
    }
    
    private func left() {
        if let collasped = Collapse.collaspeGrid(grid: nodes, rowLength: 4) {
            nodes = collasped
            delegate?.updateGrid(grid: nodes)
            spawn()
        }
    }
    
    private func right() {
        nodes.reverse1d2(size: 4)
        let collasped = Collapse.collaspeGrid(grid: nodes, rowLength: 4)
        if (collasped != nil) {
            nodes = collasped
        }
        nodes.reverse1d2(size: 4)
        delegate?.updateGrid(grid: nodes)
        if (collasped != nil) {
            spawn()
        }
    }
    
    private func up() {
        nodes.transpose1d2(size: 4)
        let collasped = Collapse.collaspeGrid(grid: nodes, rowLength: 4)
        if (collasped != nil) {
            nodes = collasped
        }
        nodes.transpose1d2(size: 4)
        delegate?.updateGrid(grid: nodes)
        if (collasped != nil) {
            spawn()
        }
    }
    
    private func down() {
        nodes.transpose1d2(size: 4)
        nodes.reverse1d2(size: 4)
        let collasped = Collapse.collaspeGrid(grid: nodes, rowLength: 4)
        if (collasped != nil) {
            nodes = collasped
        }
        nodes.reverse1d2(size: 4)
        nodes.transpose1d2(size: 4)
        delegate?.updateGrid(grid: nodes)
        if (collasped != nil) {
            spawn()
        }
    }
}
{% endhighlight %}
</div>


#### What's this other stuff?


And where's the number crunching? You may have noticed that our left, right, up, and down functions are calling functions not visible in our game2048 class. Our number crunching functionality was broken off from our game2048 and put into a class, Collapse, and in an extension of the Array class. This helps to keep our classes small, improving the readability, management, and usability of our code.
Within Collapse, we are able to take 1-demensional arrays and collapse them, meaning like values within the array are combined if adjacent indices are of equal value. The reverse1d and transpose1d2 extensions allow us to shift around the boards values so that they may be used within the same collapse method to produce their desired results.

<div style="max-height: 400px !important; overflow-y: auto !important;">
{% highlight swift %}
class Collapse {
    
    /* Removes zeros, does one time combining of consecutive equal values
     (pairs) so that the pair now equal a single value of the shared 
     value + 1, adds zeros to the end of the new arr so that its size 
     equals the original size */
    static func collapse(arr: [Int]) -> [Int] {
        
        var collasped = arr.filter{$0 != 0}
        
        for i in 0..<collasped.count {
            
            if (i < collasped.count - 1) {
                if collasped[i] == collasped[i+1] {
                    collasped[i] = collasped[i] + 1
                    collasped[i+1] = 0
                    collasped = collasped.filter{$0 != 0}
                }
            }
        }
        let diff = arr.count - collasped.count
        for _ in 0..<diff {
            collasped.append(0)
        }
        
        return collasped
    }
    
    static func collaspeGrid(grid: [Int], rowLength: Int) -> [Int]? {
        assert(rowLength * rowLength == grid.count)
        var indexStart = 0
        var postCollaspe = [Int]()
        
        for _ in 0..<rowLength {
            postCollaspe += collapse(arr: Array(grid[indexStart..<indexStart + rowLength]))
            indexStart += rowLength
        }

        return grid == postCollaspe ? nil : postCollaspe
    }
}

extension Array {
    
    /*Reverses each subset of the array of length size(parameter) in place*/
    mutating func reverse1d2(size: Int) {
        assert(size * size == self.count)
        var start = 0
        var end = size
        
        for _ in 0..<size {
            let reversedRange = self[start..<end].reversed()
            self.replaceSubrange(start..<end, with: reversedRange)
            start = end
            end = end + size
        }
    }
    
    /*Does a matrix transpose on a 1d array as if it were a 2d array
     with rows and columns of length size*/
    mutating func transpose1d2(size: Int) {
        assert(size * size == self.count)
        var transposedArr = [Element]()
        
        for firstElementOfNewRow in 0..<size {
            var newRow = [Element]()
            
            for multiplier in 0..<size {
                newRow.append(self[firstElementOfNewRow + size * multiplier])
            }
            
            transposedArr += newRow
        }
        
        self = transposedArr
    }
}

{% endhighlight %}
</div>

---
<br>

{: style="text-align:center"}
![Markdowm Image][16]

### Communication is Key

Thoughout our game2048 class, you may have noticed calls to something called a delegate. When we talked about the view controller, we explained how it acts as the gateway between the communication of our two entities, our view and our model. When we created our view controller, we could see that our view controller holds references to both our view and our model, and so our view controller is unlimited in its communication to them. Our model, however, has no idea where it came from, it has no idea who created it. To establish the connection from our model to our view controller, we use a design pattern called **delegation**. 

### Delegation

Delegates allow us to communicate from one object to another in a decoupled manner. Decoupling, the practice of keeping entities independent, is ideal for keeping our system as a whole more robust. Here we use delegates to communicate from our game2048 object, game, back to its owner, our view controller. Our game object does not know anything about our view controller, only that it adheres to a protocol, allowing us to set it as our game object's delegate. As our code runs in our game2048 class, it makes calls to its delegate; if the delegate is set, it runs the code defined by the delegate object. In our example, our game object code runs, makes calls to its delegate, finds that its set to our view controller, and runs the code defined by our view controller.

<div style="max-height: 250px !important; overflow-y: auto !important;">
{% highlight swift %}
protocol game2048Delegate: class {
    func initGrid()
    func updateGrid(grid: [Int])
}

extension ViewController: game2048Delegate {

    func updateGrid(grid: [Int]) {
        for i in 0..<16 {
            gridViews[i].updateTile(val: grid[i])
        }
    }
    
    func initGrid() {
        for i in 0..<16 {
            gridViews[i].updateTile(val: 0)
        }
    }
}
{% endhighlight %}
</div>

---
<br>

{: style="text-align:center"}
![Markdowm Image][10]

## Conclusion

 Finally, a completed app. To summarize, we learned how the storyboard helps developers lay out the foundation of their apps and constraints allow applications to be layed out across all devices. Views govern the look and feel of an application, models act as the logical backend, and controllers act as the middle man between the two. Lastly, we learned how we can use delegates to establish a means of communicating between decoupled classes. And there it is, with this guide we have all the tools needed to create one of the most popular games to ever exist on Apple's App Store, 2048.



[7]: https://eriktanner.github.io/SwiftAppBlog/assets/images/drawing/board.png
[8]: https://eriktanner.github.io/SwiftAppBlog/assets/images/drawing/story.png
[9]: https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/my2048.png
[10]: https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/my2048sim.png
[11]: https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/gridViewStoryBoard.png
[12]: https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/threeBlocks.png
[13]: https://www.raywenderlich.com/1073-model-view-controller-mvc-in-ios-a-modern-approach
[14]: https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/blueController.png
[15]: https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/logicGate.png
[16]: https://eriktanner.github.io/SwiftAppBlog/assets/images/2048/signal.png


