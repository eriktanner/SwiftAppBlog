---
title: "Drawing"
layout: post
date: 2019-03-19 22:48
image: /assets/images/2048/official2048square.png
headerImage: false
tag:
- class project
- project 1
category: blog
author: Erik Fok
description: Drawing in ios

---

{: style="text-align:center"}
![Markdowm Image][7]

## Drawing

<div>
    <p> In iOS, we can add custom drawings on our views by using Apple's Core Graphic's API. Core Graphic's is a powerful vector drawing framework, and it comes in handy when dealing with the various phone sizes and pixel capabilities of phones. Instead of drawing multiple boards of various sizes in say Photoshop, we're going to draw our board through code using Core Graphic's capabiltiies, guaranteeing a quality board irrespective of the phone it is displayed on.  </p>
</div>

---

## Background

Our goal for 2048 is to have animated tiles when the user collapses the board left, right, up, or down. Before getting ahead of ourselves with dynamic animations, we're going to create a background to our game, a static board. In this article, we are going to draw the board of our 2048 game. 

<br>

### Setting up the View


<div>
    <p> First things first, we're going to have to create a view for us to work on. This will involve creating our view in our storyboard, and setting its constraints. In this example, our board is placed in a vertical stack view, and so its leading and trailing anchors will equal the leading and trailing anchors of its containing stack view. The constraints of both our board and its containing stack view are shown. A thing to note is the fact that 2 of the stack view's constraints are faded. These constraints are applied when the height of the phone is compact, for most phones this is when it is landscape mode. Another point is the "@250" and others, these are priority numbers. Priority numbers tell the compiler which constraints it is  to break when the UI can't fit, no @ symbol means the constraint is required, and the lower priority constraints will be broken before higher priority constraints. </p>
</div>

{: style="text-align:center"}
![Markdowm Image][8]

<br>

### Creating the Class

<div class="side-by-side" style="margin-bottom: 0px; margin-top: 0px; padding-bottom: 0px">
    <div class="toleft" style="text-align:right; margin-top: 8px; margin-bottom: 0px;">
        <img class="image" src="https://eriktanner.github.io/SwiftAppBlog/assets/images/drawing/class_selection.png" alt="Alt Text">
    </div>

    <div class="toright" style="margin-bottom: 0px; padding-bottom: 0px">
        <p>  Next, we need to create our class, BoardView. We need to create a file, board.swift, and add a class BoardView, subclassing from UIView. Then we will go back to the view we want to represent as our board, as set its class as BoardView in the Identity Inspector. </p>
    </div>
</div>


## Overidding draw(rect: CGRect)

<div>
    <p> When the compiler renders or rerenders views, it calls a function home to all UIViews, draw(rect: CGRect). CGRect represents a location and a size on screen, in our case, this CGRect will represent the location and size of our board, which is decided by the contraints given to our board in the storyboard. It is here where we add our code to handle our custom drawing for our BoardView. To draw we are going to use a class in the Core Graphic's API, UIBezierPath. UIBezierPath allows us to set locations and draw lines to these locations. It also has useful constructors for creating shapes, such as rectangles. We can then fill, if it's closed, and stroke these paths to draw our board.</p>
</div>

### Our draw(rect: CGRect) function

<div class="side-by-side" style="margin-bottom: 0px; margin-top: 0px; padding-bottom: 0">
    <div class="toleft" style="max-height: 250px !important; overflow-y: auto !important; padding-bottom: 10">
{% highlight swift %}
override func draw(_ rect: CGRect) {
    MyColors.background0.setFill()
    MyColors.grayBorder.setStroke()
        
    let lineWidth = CGFloat((bounds.maxX - bounds.minX)/40)
        
    let borderPath = UIBezierPath(rect: rect)
    borderPath.lineWidth = lineWidth
    borderPath.fill()
    borderPath.stroke()
        
    let path = UIBezierPath()
    path.lineWidth = lineWidth
        
    for i in 1...3 {
        path.move(to: CGPoint(x: bounds.maxX * CGFloat(i) / 4, y: bounds.minY))
        path.addLine(to: CGPoint(x: bounds.maxX * CGFloat(i) / 4, y: bounds.maxY))
        path.move(to: CGPoint(x: bounds.minX, y: bounds.maxY * CGFloat(i) / 4))
        path.addLine(to: CGPoint(x: bounds.maxX, y: bounds.maxY * CGFloat(i) / 4))
    }
        
    path.stroke()
}
{% endhighlight %}
    </div>

    <div class="toright" style="margin-bottom: 0px; padding-bottom: 0px">
        <p> Here we first set our fill and stroke colors. We then create a Bezier path, and rectanlge, and calculate the width we want our strokes to be, based on the width of the board. The width of our lines depend on which device is running and its orientation. Lastly, we create our grid lines by creating another Bezier path, which has its points set and drawn from respective tertiary points of the board, and stroking its path. </p>
    </div>
</div>

 ---

## Conclusion

<div>
    <p> With that, we have just drawn our board using Core Graphics. This has granted us a more flexible UI, which adjusts to any screen size or orientation seemlessly, and will act as the background for our tiles to animate above moving forward. </p>
</div>


[7]: https://eriktanner.github.io/SwiftAppBlog/assets/images/drawing/board.png
[8]: https://eriktanner.github.io/SwiftAppBlog/assets/images/drawing/story.png


